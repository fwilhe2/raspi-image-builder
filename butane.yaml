variant: fcos
version: 1.4.0
passwd:
  users:
    - name: core
      password_hash: $y$j9T$56zG0U/m2y3wKgDTvaxC2/$wx0oCcKGS0D8SmgXntmz9kfE/jZSkWwz6oVTdkN2GS9
systemd:
  units:
    - name: rpm-ostree-install-deps.service
      enabled: true
      contents: |
        [Unit]
        Description=Layer dependencies with rpm-ostree
        Wants=network-online.target
        After=network-online.target
        # We run before `zincati.service` to avoid conflicting rpm-ostree
        # transactions.
        Before=zincati.service
        ConditionPathExists=!/var/lib/%N.stamp

        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/bin/rpm-ostree install --apply-live firewalld tuned https://github.com/k3s-io/k3s-selinux/releases/download/v1.1.stable.1/k3s-selinux-1.1-1.el8.noarch.rpm
        ExecStart=/usr/bin/systemctl disable --now firewalld
        ExecStart=/usr/bin/systemctl mask firewalld
        ExecStart=/usr/bin/systemctl disable --now tuned
        ExecStart=/usr/bin/systemctl mask tuned
        ExecStart=/usr/bin/systemctl restart dbus
        ExecStart=/bin/touch /var/lib/%N.stamp

        [Install]
        WantedBy=multi-user.target
    - name: install-k3s.service
      enabled: true
      contents: |
        [Unit]
        Description=install k3s
        Wants=network-online.target
        After=zincati.service
        ConditionPathExists=!/var/lib/rancher/k3s
        [Service]
        Type=oneshot
        RemainAfterExit=yes
        ExecStart=/usr/local/bin/install-k3s.sh

        [Install]
        WantedBy=multi-user.target
storage:
  files:
    - path: /etc/hostname
      mode: 0644
      contents:
        inline: |
          routernetes
    - path: /usr/local/bin/install-k3s.sh
      mode: 0755
      contents:
        inline: |
          #!/bin/bash
          set -e
          /usr/local/bin/setup-interfaces.sh
          curl -sfL https://get.k3s.io | sh -s - --disable=traefik --disable=servicelb --flannel-backend=host-gw --flannel-iface=k3s-lo
          /usr/bin/sleep 30
          /usr/local/bin/kubectl apply -f https://github.com/rancher/system-upgrade-controller/releases/latest/download/system-upgrade-controller.yaml
          /usr/local/bin/kubectl wait deployment -n system-upgrade system-upgrade-controller --for condition=Available=True
          /usr/local/bin/kubectl apply -f https://raw.githubusercontent.com/routernetes/routernetes/main/k3s/upgrade-plan.yaml
          /usr/local/bin/install-olm.sh
    - path: /usr/local/bin/install-olm.sh
      mode: 0755
      contents:
        inline: |
          #!/bin/bash
          set -e
          export ARCH=$(case $(uname -m) in x86_64) echo -n amd64 ;; aarch64) echo -n arm64 ;; *) echo -n $(uname -m) ;; esac)
          export OS=$(uname | awk '{print tolower($0)}')
          export OPERATOR_SDK_DL_URL=https://github.com/operator-framework/operator-sdk/releases/download/v1.21.0
          curl -L -o /usr/local/bin/operator-sdk ${OPERATOR_SDK_DL_URL}/operator-sdk_${OS}_${ARCH}
          chmod +x /usr/local/bin/operator-sdk
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          /usr/local/bin/operator-sdk olm install
    - path: /usr/local/bin/setup-interfaces.sh
      mode: 0755
      contents:
        inline: |
          #!/bin/bash
          set -e
          /usr/bin/systemctl start NetworkManager
          /usr/bin/nmcli connection add type dummy ifname k3s-lo ipv4.method manual ipv4.addresses 100.64.0.1/32 ipv6.method ignore
          /usr/bin/nmcli connection up dummy-k3s-lo;
          export interfaces=$(/usr/sbin/ip -details -json addr | /usr/bin/jq '. | map(select((.linkinfo == null) and (.link_type == "ether")))')
          export external=$(echo "$interfaces" | /usr/bin/jq -r '. | map(select(.addr_info[] | (.dynamic == true and .family == "inet")))[0] | .ifname')
          export internal=$(echo "$interfaces" | /usr/bin/jq -r --arg external "$external"  '. | map(select(.ifname != $external))[0] | .ifname')
          /usr/bin/nmcli connection add con-name r9s-external type ethernet ifname $external ipv4.method auto ipv6.method ignore
          /usr/bin/nmcli connection up r9s-external
          /usr/bin/nmcli connection add con-name r9s-internal type ethernet ifname $internal ipv4.method manual ipv4.addresses 10.0.0.1/24 ipv6.method ignore
          /usr/bin/nmcli connection up r9s-internal
